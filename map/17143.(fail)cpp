#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

struct shark {
	int r, c;
	int s;
	int d;//1-위, 2-아래, 3-오른쪽, 4-왼쪽
	int z;
	bool die;
};

int map[101][101];
int R, C, num;
int dx[5] = { 0,0,0,1,-1 };
int dy[5] = { 0,-1,1,0,0 };
//1인 경우는 위, 2인 경우는 아래, 3인 경우는 오른쪽, 4인 경우는 왼쪽

vector<shark> v;

int sum = 0;

bool compare(shark s1, shark s2) {
	return s1.s < s2.s;
}

int fishing(int x) {
	//cout << "D";
	//cout << x;
	for (int i = 1; i <= R; i++) {
		int n =map[i][x];
		cout << n;
		//cout << "g";
		if (n != -1 && !v[n].die) {
			sum += v[n].z;
			cout << "gggg" << sum << "gggg" << endl;
			v[n].die = 1;
			map[i][x] = -1;
			break;
		}
	}
	//cout << "D";
	return 0;
}

int move() {
	for (int i = 0; i < num; i++) {
		if (v[i].die)	continue;
		if(map[v[i].r][v[i].c]==i)	map[v[i].r][v[i].c] = -1;
		cout << "s" << v[i].r << v[i].c << endl;
		v[i].r += dy[v[i].d] * v[i].s;
		v[i].c += dx[v[i].d] * v[i].s;
		while (!((0 < v[i].r && v[i].r <= R) && (0 < v[i].c && v[i].c <= C))) {
			if (v[i].r <= 0) {
				cout << v[i].r;
				v[i].d = 2;
				v[i].r = -v[i].r + 2;
			}
			if (v[i].r > R) {
				//cout << 2;
				v[i].d = 1;
				v[i].r = -v[i].r + 2 * R;
			}
			if (v[i].c <= 0) {
				//cout << 3;
				v[i].d = 3;
				v[i].c = -v[i].c + 2;
			}
			if (v[i].c > C) {
				//cout << 4;
				v[i].d = 4;
				v[i].c = -v[i].c + 2 * C;
			}
		}
		if (map[v[i].r][v[i].c]!=-1&&map[v[i].r][v[i].c] < i) v[map[v[i].r][v[i].c]].die = 1;
		map[v[i].r][v[i].c] = i;
		cout << "s" << v[i].r << v[i].c << endl;
		cout << "D";
	}
	return 0;
}

int main() {
	cin >> R >> C;
	cin >> num;
	fill_n(map[0], 10001, -1);
	for (int i = 0; i < num; i++) {
		shark s;
		cin >> s.r >> s.c >> s.s >> s.d >> s.z;
		s.die = 0;
		v.push_back(s);
	}
	sort(v.begin(), v.end(), compare);
	for (int i = 0; i < num; i++) {
		map[v[i].r][v[i].c] = i;
	}
	for (int i = 1; i <= C; i++) {
		fishing(i);
		move();
	}
	cout << sum;
	return 0;
}